class GridViewBuilder{constructor(e,t={}){if(this.container="string"==typeof e?document.querySelector(e):e,!this.container)throw new Error("Container element not found");this.state={columns:t.defaultColumns||3,mainSpacing:t.defaultMainSpacing||16,crossSpacing:t.defaultCrossSpacing||16,aspectRatio:t.defaultAspectRatio||1,padding:t.defaultPadding||16,itemCount:t.defaultItemCount||12,codeStyle:t.defaultCodeStyle||"count"},this.options={showControls:!1!==t.showControls,showCodeOutput:!1!==t.showCodeOutput,showPreview:!1!==t.showPreview,theme:t.theme||"light",onCodeGenerated:t.onCodeGenerated||null,...t},this.init()}init(){this.render(),this.attachEventListeners(),this.updateGrid(),this.updateCode()}render(){const e=this.container.style.height?"100%":"calc(100vh - 120px)",t=`\n      <div class="gridview-builder-widget" data-theme="${this.options.theme}">\n        <div class="flex gap-4" style="height: ${e};">\n          ${this.options.showControls?this.renderControls():""}\n          <div class="flex-1 flex flex-col gap-4 overflow-auto">\n            ${this.options.showPreview?this.renderPreview():""}\n            ${this.options.showCodeOutput?this.renderCodeOutput():""}\n          </div>\n        </div>\n      </div>\n    `;this.container.innerHTML=t}renderControls(){return`\n      <div class="w-80 flex flex-col gap-4 overflow-auto">\n        <div class="text-center mb-2">\n          <h3 class="text-xl font-bold text-primary">GridView Controls</h3>\n          <p class="text-sm opacity-70">Adjust parameters to see live preview</p>\n        </div>\n\n        <div class="card bg-base-200 shadow-sm">\n          <div class="card-body p-4 gap-3">\n            <div>\n              <label class="label">\n                <span class="label-text font-semibold">Code Style</span>\n              </label>\n              <div class="flex gap-2">\n                <label class="flex-1 cursor-pointer">\n                  <input type="radio" name="codeStyle" value="count" class="radio radio-primary radio-sm" ${"count"===this.state.codeStyle?"checked":""}>\n                  <span class="label-text ml-2">GridView.count</span>\n                </label>\n                <label class="flex-1 cursor-pointer">\n                  <input type="radio" name="codeStyle" value="builder" class="radio radio-primary radio-sm" ${"builder"===this.state.codeStyle?"checked":""}>\n                  <span class="label-text ml-2">GridView.builder</span>\n                </label>\n              </div>\n              <div class="text-xs opacity-60 mt-1">\n                ${"count"===this.state.codeStyle?"Best for static layouts":"Best for dynamic data lists"}\n              </div>\n            </div>\n            <div class="divider my-1"></div>\n            ${this.renderSlider("columns","Cross Axis Count",2,6,1,"primary","Number of columns in the grid")}\n            ${this.renderSlider("mainSpacing","Main Axis Spacing",0,40,1,"secondary","Vertical spacing between items")}\n            ${this.renderSlider("crossSpacing","Cross Axis Spacing",0,40,1,"secondary","Horizontal spacing between items")}\n            ${this.renderSlider("aspectRatio","Child Aspect Ratio",.5,2,.1,"accent","Width to height ratio of each cell")}\n            ${this.renderSlider("padding","Padding",0,40,1,"info","Padding around the entire grid")}\n            ${this.renderSlider("itemCount","Item Count",4,24,1,"","Number of items to display")}\n          </div>\n        </div>\n        <button class="btn btn-primary btn-block copy-code-btn">ðŸ“‹ Copy Flutter Code</button>\n      </div>\n    `}renderSlider(e,t,n,i,s,a,o){const r=a?`range-${a}`:"";return`\n      <div>\n        <label class="label">\n          <span class="label-text font-semibold">${t}</span>\n          <span class="label-text-alt badge ${a?`badge-${a}`:""}" data-value="${e}">${this.state[e]}</span>\n        </label>\n        <input type="range" min="${n}" max="${i}" step="${s}" value="${this.state[e]}"\n               class="range ${r} range-sm" data-slider="${e}">\n        <div class="text-xs opacity-60 mt-1">${o}</div>\n      </div>\n    `}renderPreview(){return`\n      <div class="card bg-base-200 shadow-sm" style="flex: 2;">\n        <div class="card-body p-4 flex flex-col" style="height: 100%;">\n          <h4 class="font-bold text-lg mb-2">Live Preview</h4>\n          <div class="grid-preview bg-base-100 rounded-lg overflow-auto flex-1" style="padding: ${this.state.padding}px;">\n            <div class="grid-container"></div>\n          </div>\n        </div>\n      </div>\n    `}renderCodeOutput(){return'\n      <div class="card bg-base-200 shadow-sm" style="flex: 1;">\n        <div class="card-body p-4 flex flex-col" style="height: 100%;">\n          <h4 class="font-bold text-lg mb-2">Generated Flutter Code</h4>\n          <pre class="code-output bg-base-300 p-4 rounded-lg text-sm overflow-x-auto flex-1"><code></code></pre>\n        </div>\n      </div>\n    '}attachEventListeners(){this.container.querySelectorAll("[data-slider]").forEach(e=>{e.addEventListener("input",e=>{const t=e.target.dataset.slider,n=parseFloat(e.target.value);this.updateState(t,n)})});this.container.querySelectorAll('input[name="codeStyle"]').forEach(e=>{e.addEventListener("change",e=>{this.updateState("codeStyle",e.target.value);const t=e.target.closest(".card-body").querySelector(".text-xs.opacity-60");t&&(t.textContent="count"===e.target.value?"Best for static layouts":"Best for dynamic data lists")})});const e=this.container.querySelector(".copy-code-btn");e&&e.addEventListener("click",()=>this.copyCode())}updateState(e,t){this.state[e]=t;const n=this.container.querySelector(`[data-value="${e}"]`);n&&(n.textContent=t),this.updateGrid(),this.updateCode()}updateGrid(){const e=this.container.querySelector(".grid-container");if(!e)return;const t=["bg-primary text-primary-content","bg-secondary text-secondary-content","bg-accent text-accent-content"];let n=`<div style="display: grid; grid-template-columns: repeat(${this.state.columns}, 1fr); gap: ${this.state.mainSpacing}px;">`;for(let e=1;e<=this.state.itemCount;e++){n+=`<div class="${t[(e-1)%3]} rounded-lg flex items-center justify-center font-bold" style="aspect-ratio: ${this.state.aspectRatio};">${e}</div>`}n+="</div>",e.innerHTML=n;const i=this.container.querySelector(".grid-preview");i&&(i.style.padding=`${this.state.padding}px`)}updateCode(){const e=this.generateFlutterCode(),t=this.container.querySelector(".code-output code");t&&(t.textContent=e),this.options.onCodeGenerated&&this.options.onCodeGenerated(e)}generateCountCode(){return`GridView.count(\n  crossAxisCount: ${this.state.columns},\n  mainAxisSpacing: ${this.state.mainSpacing},\n  crossAxisSpacing: ${this.state.crossSpacing},\n  childAspectRatio: ${this.state.aspectRatio},\n  padding: EdgeInsets.all(${this.state.padding}),\n  children: List.generate(${this.state.itemCount}, (index) {\n    return Container(\n      decoration: BoxDecoration(\n        color: Colors.blue,\n        borderRadius: BorderRadius.circular(8),\n      ),\n      child: Center(\n        child: Text(\n          '\${index + 1}',\n          style: TextStyle(\n            color: Colors.white,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n      ),\n    );\n  }),\n)`}generateBuilderCode(){return`GridView.builder(\n  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n    crossAxisCount: ${this.state.columns},\n    mainAxisSpacing: ${this.state.mainSpacing},\n    crossAxisSpacing: ${this.state.crossSpacing},\n    childAspectRatio: ${this.state.aspectRatio},\n  ),\n  padding: EdgeInsets.all(${this.state.padding}),\n  itemCount: ${this.state.itemCount},\n  itemBuilder: (context, index) {\n    return Container(\n      decoration: BoxDecoration(\n        color: Colors.blue,\n        borderRadius: BorderRadius.circular(8),\n      ),\n      child: Center(\n        child: Text(\n          '\${index + 1}',\n          style: TextStyle(\n            color: Colors.white,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n      ),\n    );\n  },\n)`}generateFlutterCode(){return"builder"===this.state.codeStyle?this.generateBuilderCode():this.generateCountCode()}copyCode(){const e=this.generateFlutterCode();navigator.clipboard.writeText(e).then(()=>{const e=this.container.querySelector(".copy-code-btn");if(e){const t=e.textContent;e.textContent="âœ“ Code Copied to Clipboard!",e.classList.remove("btn-primary"),e.classList.add("btn-success"),setTimeout(()=>{e.textContent=t,e.classList.remove("btn-success"),e.classList.add("btn-primary")},2e3)}})}getCode(){return this.generateFlutterCode()}getState(){return{...this.state}}setState(e){Object.assign(this.state,e),this.updateGrid(),this.updateCode(),Object.keys(e).forEach(e=>{const t=this.container.querySelector(`[data-slider="${e}"]`);t&&(t.value=this.state[e]);const n=this.container.querySelector(`[data-value="${e}"]`);n&&(n.textContent=this.state[e])})}}"undefined"!=typeof module&&module.exports&&(module.exports=GridViewBuilder),"undefined"!=typeof window&&(window.GridViewBuilder=GridViewBuilder);
!function(){"use strict";if(function(e){if(!document.querySelector(`link[href="${e}"]`)){const t=document.createElement("link");t.rel="stylesheet",t.href=e,document.head.appendChild(t)}}("https://cdn.jsdelivr.net/npm/daisyui@5.1.29/daisyui.min.css"),!document.querySelector('script[src*="tailwindcss.com"]')){const e=document.createElement("script");e.src="https://cdn.tailwindcss.com",document.head.appendChild(e)}window.GridViewBuilder=class{constructor(e,t={}){if(this.container="string"==typeof e?document.querySelector(e):e,!this.container)throw new Error("Container element not found");this.state={columns:t.defaultColumns||3,mainSpacing:t.defaultMainSpacing||16,crossSpacing:t.defaultCrossSpacing||16,aspectRatio:t.defaultAspectRatio||1,padding:t.defaultPadding||16,itemCount:t.defaultItemCount||12,codeStyle:t.defaultCodeStyle||"count",contentTemplate:t.defaultContentTemplate||"container"},this.options={showControls:!1!==t.showControls,showCodeOutput:!1!==t.showCodeOutput,showPreview:!1!==t.showPreview,theme:t.theme||"light",onCodeGenerated:t.onCodeGenerated||null,compact:t.compact||!1,...t},this.init()}init(){this.render(),this.attachEventListeners(),this.updateGrid(),this.updateCode()}render(){const e=this.container.style.height?"100%":"calc(100vh - 120px)",t=`\n        <div class="gridview-builder-widget" data-theme="${this.options.theme}">\n          <div class="flex gap-4" style="height: ${e};">\n            ${this.options.showControls?this.renderControls():""}\n            <div class="flex-1 flex flex-col gap-4 overflow-auto">\n              ${this.options.showPreview?this.renderPreview():""}\n              ${this.options.showCodeOutput?this.renderCodeOutput():""}\n            </div>\n          </div>\n        </div>\n      `;this.container.innerHTML=t}renderControls(){return`\n        <div class="${this.options.compact?"w-full":"w-80"} flex flex-col gap-4">\n          <div class="text-center mb-2">\n            <h3 class="text-xl font-bold text-primary">GridView Controls</h3>\n            <p class="text-sm opacity-70">Adjust parameters to see live preview</p>\n          </div>\n\n          <div class="card bg-base-200 shadow-sm">\n            <div class="card-body p-4 gap-3">\n              <div>\n                <label class="label">\n                  <span class="label-text font-semibold">Code Style</span>\n                </label>\n                <div class="flex gap-2">\n                  <label class="flex-1 cursor-pointer">\n                    <input type="radio" name="codeStyle" value="count" class="radio radio-primary radio-sm" ${"count"===this.state.codeStyle?"checked":""}>\n                    <span class="label-text ml-2">GridView.count</span>\n                  </label>\n                  <label class="flex-1 cursor-pointer">\n                    <input type="radio" name="codeStyle" value="builder" class="radio radio-primary radio-sm" ${"builder"===this.state.codeStyle?"checked":""}>\n                    <span class="label-text ml-2">GridView.builder</span>\n                  </label>\n                </div>\n                <div class="text-xs opacity-60 mt-1">\n                  ${"count"===this.state.codeStyle?"Best for static layouts":"Best for dynamic data lists"}\n                </div>\n              </div>\n              <div>\n                <label class="label">\n                  <span class="label-text font-semibold">Content Template</span>\n                </label>\n                <select class="select select-bordered select-sm w-full" data-template-select>\n                  <option value="container" ${"container"===this.state.contentTemplate?"selected":""}>Container (Default)</option>\n                  <option value="gridtile" ${"gridtile"===this.state.contentTemplate?"selected":""}>GridTile (Image Gallery)</option>\n                  <option value="card" ${"card"===this.state.contentTemplate?"selected":""}>Card (Icon + Text)</option>\n                  <option value="stack" ${"stack"===this.state.contentTemplate?"selected":""}>Stack (Image Overlay)</option>\n                  <option value="product" ${"product"===this.state.contentTemplate?"selected":""}>Product Card</option>\n                </select>\n                <div class="text-xs opacity-60 mt-1" data-template-description>\n                  ${this.getTemplateDescription(this.state.contentTemplate)}\n                </div>\n              </div>\n              <div class="divider my-1"></div>\n              ${this.renderSlider("columns","Cross Axis Count",2,6,1,"primary","Number of columns in the grid")}\n              ${this.renderSlider("mainSpacing","Main Axis Spacing",0,40,1,"secondary","Vertical spacing between items")}\n              ${this.renderSlider("crossSpacing","Cross Axis Spacing",0,40,1,"secondary","Horizontal spacing between items")}\n              ${this.renderSlider("aspectRatio","Child Aspect Ratio",.5,2,.1,"accent","Width to height ratio of each cell")}\n              ${this.renderSlider("padding","Padding",0,40,1,"info","Padding around the entire grid")}\n              ${this.renderSlider("itemCount","Item Count",4,24,1,"","Number of items to display")}\n            </div>\n          </div>\n          <button class="btn btn-primary btn-block copy-code-btn">üìã Copy Flutter Code</button>\n        </div>\n      `}renderSlider(e,t,n,i,s,a,o){const r=a?`range-${a}`:"";return`\n        <div>\n          <label class="label">\n            <span class="label-text font-semibold">${t}</span>\n            <span class="label-text-alt badge ${a?`badge-${a}`:""}" data-value="${e}">${this.state[e]}</span>\n          </label>\n          <input type="range" min="${n}" max="${i}" step="${s}" value="${this.state[e]}"\n                 class="range ${r} range-sm" data-slider="${e}">\n          <div class="text-xs opacity-60 mt-1">${o}</div>\n        </div>\n      `}renderPreview(){return`\n        <div class="card bg-base-200 shadow-sm" style="flex: 2;">\n          <div class="card-body p-4 flex flex-col" style="height: 100%;">\n            <h4 class="font-bold text-lg mb-2">Live Preview</h4>\n            <div class="grid-preview bg-base-100 rounded-lg overflow-auto flex-1" style="padding: ${this.state.padding}px;">\n              <div class="grid-container"></div>\n            </div>\n          </div>\n        </div>\n      `}renderCodeOutput(){return'\n        <div class="card bg-base-200 shadow-sm" style="flex: 1;">\n          <div class="card-body p-4 flex flex-col" style="height: 100%;">\n            <h4 class="font-bold text-lg mb-2">Generated Flutter Code</h4>\n            <pre class="code-output bg-base-300 p-4 rounded-lg text-sm overflow-x-auto flex-1"><code></code></pre>\n          </div>\n        </div>\n      '}attachEventListeners(){this.container.querySelectorAll("[data-slider]").forEach(e=>{e.addEventListener("input",e=>{const t=e.target.dataset.slider,n=parseFloat(e.target.value);this.updateState(t,n)})});this.container.querySelectorAll('input[name="codeStyle"]').forEach(e=>{e.addEventListener("change",e=>{this.updateState("codeStyle",e.target.value);const t=e.target.closest(".card-body").querySelector(".text-xs.opacity-60");t&&(t.textContent="count"===e.target.value?"Best for static layouts":"Best for dynamic data lists")})});const e=this.container.querySelector("[data-template-select]");e&&e.addEventListener("change",e=>{this.updateState("contentTemplate",e.target.value);const t=this.container.querySelector("[data-template-description]");t&&(t.textContent=this.getTemplateDescription(e.target.value))});const t=this.container.querySelector(".copy-code-btn");t&&t.addEventListener("click",()=>this.copyCode())}getTemplateDescription(e){return{container:"Simple colored box - good for basic layouts",gridtile:"Image with header/footer - perfect for galleries",card:"Icon and text card - ideal for dashboards",stack:"Image with overlay - great for portfolios",product:"Product card with image and price - for e-commerce"}[e]||""}updateState(e,t){this.state[e]=t;const n=this.container.querySelector(`[data-value="${e}"]`);n&&(n.textContent=t),this.updateGrid(),this.updateCode()}generatePreviewItem(e,t){const n=this.state.aspectRatio;switch(t){case"container":return`<div class="${["bg-primary","bg-secondary","bg-accent"][(e-1)%3]} text-white rounded-lg flex items-center justify-center font-bold" style="aspect-ratio: ${n};">${e}</div>`;case"gridtile":return`<div class="relative bg-base-300 rounded-lg overflow-hidden" style="aspect-ratio: ${n};">\n            <div class="w-full h-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-4xl text-white">üì∑</div>\n            <div class="absolute top-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs px-2 py-1">Item ${e}</div>\n          </div>`;case"card":return`<div class="card bg-base-100 shadow-md" style="aspect-ratio: ${n};">\n            <div class="card-body p-2 flex flex-col items-center justify-center">\n              <div class="text-4xl">‚≠ê</div>\n              <div class="text-sm font-bold mt-1">Item ${e}</div>\n            </div>\n          </div>`;case"stack":return`<div class="relative bg-base-300 rounded-lg overflow-hidden" style="aspect-ratio: ${n};">\n            <div class="w-full h-full bg-gradient-to-br from-accent to-secondary flex items-center justify-center text-4xl text-white">üñºÔ∏è</div>\n            <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-60 text-white text-xs px-2 py-1">Item ${e}</div>\n          </div>`;case"product":return`<div class="card bg-base-100 shadow-md rounded-lg overflow-hidden" style="aspect-ratio: ${n};">\n            <div class="flex flex-col h-full">\n              <div class="flex-1 bg-gradient-to-br from-info to-primary flex items-center justify-center text-4xl text-white">üõçÔ∏è</div>\n              <div class="p-2 text-xs">\n                <div class="font-bold">Product ${e}</div>\n                <div class="text-success font-bold">$${e}0.00</div>\n              </div>\n            </div>\n          </div>`;default:return this.generatePreviewItem(e,"container")}}updateGrid(){const e=this.container.querySelector(".grid-container");if(!e)return;let t=`<div style="display: grid; grid-template-columns: repeat(${this.state.columns}, 1fr); gap: ${this.state.mainSpacing}px;">`;for(let e=1;e<=this.state.itemCount;e++)t+=this.generatePreviewItem(e,this.state.contentTemplate);t+="</div>",e.innerHTML=t;const n=this.container.querySelector(".grid-preview");n&&(n.style.padding=`${this.state.padding}px`)}updateCode(){const e=this.generateFlutterCode(),t=this.container.querySelector(".code-output code");t&&(t.textContent=e),this.options.onCodeGenerated&&this.options.onCodeGenerated(e)}generateItemTemplate(e,t,n="    "){switch(e){case"container":return`${n}Container(\n${n}  decoration: BoxDecoration(\n${n}    color: Colors.blue,\n${n}    borderRadius: BorderRadius.circular(8),\n${n}  ),\n${n}  child: Center(\n${n}    child: Text(\n${n}      '${t}',\n${n}      style: TextStyle(\n${n}        color: Colors.white,\n${n}        fontWeight: FontWeight.bold,\n${n}      ),\n${n}    ),\n${n}  ),\n${n})`;case"gridtile":return`${n}GridTile(\n${n}  header: GridTileBar(\n${n}    backgroundColor: Colors.black45,\n${n}    title: Text('Item ${t}'),\n${n}  ),\n${n}  child: Image.network(\n${n}    'https://via.placeholder.com/300',\n${n}    fit: BoxFit.cover,\n${n}  ),\n${n})`;case"card":return`${n}Card(\n${n}  elevation: 4,\n${n}  child: Column(\n${n}    mainAxisAlignment: MainAxisAlignment.center,\n${n}    children: [\n${n}      Icon(Icons.star, size: 48, color: Colors.amber),\n${n}      SizedBox(height: 8),\n${n}      Text(\n${n}        'Item ${t}',\n${n}        style: TextStyle(fontWeight: FontWeight.bold),\n${n}      ),\n${n}    ],\n${n}  ),\n${n})`;case"stack":return`${n}Stack(\n${n}  fit: StackFit.expand,\n${n}  children: [\n${n}    Image.network(\n${n}      'https://via.placeholder.com/300',\n${n}      fit: BoxFit.cover,\n${n}    ),\n${n}    Positioned(\n${n}      bottom: 0,\n${n}      left: 0,\n${n}      right: 0,\n${n}      child: Container(\n${n}        color: Colors.black54,\n${n}        padding: EdgeInsets.all(8),\n${n}        child: Text(\n${n}          'Item ${t}',\n${n}          style: TextStyle(\n${n}            color: Colors.white,\n${n}            fontWeight: FontWeight.bold,\n${n}          ),\n${n}        ),\n${n}      ),\n${n}    ),\n${n}  ],\n${n})`;case"product":return`${n}Card(\n${n}  clipBehavior: Clip.antiAlias,\n${n}  child: Column(\n${n}    crossAxisAlignment: CrossAxisAlignment.stretch,\n${n}    children: [\n${n}      Expanded(\n${n}        child: Image.network(\n${n}          'https://via.placeholder.com/300',\n${n}          fit: BoxFit.cover,\n${n}        ),\n${n}      ),\n${n}      Padding(\n${n}        padding: EdgeInsets.all(8),\n${n}        child: Column(\n${n}          crossAxisAlignment: CrossAxisAlignment.start,\n${n}          children: [\n${n}            Text(\n${n}              'Product ${t}',\n${n}              style: TextStyle(fontWeight: FontWeight.bold),\n${n}            ),\n${n}            SizedBox(height: 4),\n${n}            Text(\n${n}              '\\$${t}0.00',\n${n}              style: TextStyle(\n${n}                color: Colors.green,\n${n}                fontWeight: FontWeight.bold,\n${n}              ),\n${n}            ),\n${n}          ],\n${n}        ),\n${n}      ),\n${n}    ],\n${n}  ),\n${n})`;default:return this.generateItemTemplate("container",t,n)}}generateCountCode(){const e=[];for(let t=1;t<=this.state.itemCount;t++)e.push(this.generateItemTemplate(this.state.contentTemplate,t,"    ")+",");return`GridView.count(\n  crossAxisCount: ${this.state.columns},\n  mainAxisSpacing: ${this.state.mainSpacing},\n  crossAxisSpacing: ${this.state.crossSpacing},\n  childAspectRatio: ${this.state.aspectRatio},\n  padding: EdgeInsets.all(${this.state.padding}),\n  children: [\n${e.join("\n")}\n  ],\n)`}generateBuilderCode(){const e=this.generateItemTemplate(this.state.contentTemplate,"\\${index + 1}","    ");return`GridView.builder(\n  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n    crossAxisCount: ${this.state.columns},\n    mainAxisSpacing: ${this.state.mainSpacing},\n    crossAxisSpacing: ${this.state.crossSpacing},\n    childAspectRatio: ${this.state.aspectRatio},\n  ),\n  padding: EdgeInsets.all(${this.state.padding}),\n  itemCount: ${this.state.itemCount},\n  itemBuilder: (context, index) {\n    return ${e};\n  },\n)`}generateFlutterCode(){return"builder"===this.state.codeStyle?this.generateBuilderCode():this.generateCountCode()}copyCode(){const e=this.generateFlutterCode();navigator.clipboard.writeText(e).then(()=>{const e=this.container.querySelector(".copy-code-btn");if(e){const t=e.textContent;e.textContent="‚úì Code Copied to Clipboard!",e.classList.remove("btn-primary"),e.classList.add("btn-success"),setTimeout(()=>{e.textContent=t,e.classList.remove("btn-success"),e.classList.add("btn-primary")},2e3)}})}getCode(){return this.generateFlutterCode()}getState(){return{...this.state}}setState(e){Object.assign(this.state,e),this.updateGrid(),this.updateCode(),Object.keys(e).forEach(e=>{const t=this.container.querySelector(`[data-slider="${e}"]`);t&&(t.value=this.state[e]);const n=this.container.querySelector(`[data-value="${e}"]`);n&&(n.textContent=this.state[e])})}}}();
!function(){"use strict";if(function(t){if(!document.querySelector(`link[href="${t}"]`)){const e=document.createElement("link");e.rel="stylesheet",e.href=t,document.head.appendChild(e)}}("https://cdn.jsdelivr.net/npm/daisyui@5.1.29/daisyui.min.css"),!document.querySelector('script[src*="tailwindcss.com"]')){const t=document.createElement("script");t.src="https://cdn.tailwindcss.com",document.head.appendChild(t)}window.GridViewBuilder=class{constructor(t,e={}){if(this.container="string"==typeof t?document.querySelector(t):t,!this.container)throw new Error("Container element not found");this.state={columns:e.defaultColumns||3,mainSpacing:e.defaultMainSpacing||16,crossSpacing:e.defaultCrossSpacing||16,aspectRatio:e.defaultAspectRatio||1,padding:e.defaultPadding||16,itemCount:e.defaultItemCount||12,codeStyle:e.defaultCodeStyle||"count"},this.options={showControls:!1!==e.showControls,showCodeOutput:!1!==e.showCodeOutput,showPreview:!1!==e.showPreview,theme:e.theme||"light",onCodeGenerated:e.onCodeGenerated||null,compact:e.compact||!1,...e},this.init()}init(){this.render(),this.attachEventListeners(),this.updateGrid(),this.updateCode()}render(){const t=this.container.style.height?"100%":"calc(100vh - 120px)",e=`\n        <div class="gridview-builder-widget" data-theme="${this.options.theme}">\n          <div class="flex gap-4" style="height: ${t};">\n            ${this.options.showControls?this.renderControls():""}\n            <div class="flex-1 flex flex-col gap-4 overflow-auto">\n              ${this.options.showPreview?this.renderPreview():""}\n              ${this.options.showCodeOutput?this.renderCodeOutput():""}\n            </div>\n          </div>\n        </div>\n      `;this.container.innerHTML=e}renderControls(){return`\n        <div class="${this.options.compact?"w-full":"w-80"} flex flex-col gap-4">\n          <div class="text-center mb-2">\n            <h3 class="text-xl font-bold text-primary">GridView Controls</h3>\n            <p class="text-sm opacity-70">Adjust parameters to see live preview</p>\n          </div>\n\n          <div class="card bg-base-200 shadow-sm">\n            <div class="card-body p-4 gap-3">\n              <div>\n                <label class="label">\n                  <span class="label-text font-semibold">Code Style</span>\n                </label>\n                <div class="flex gap-2">\n                  <label class="flex-1 cursor-pointer">\n                    <input type="radio" name="codeStyle" value="count" class="radio radio-primary radio-sm" ${"count"===this.state.codeStyle?"checked":""}>\n                    <span class="label-text ml-2">GridView.count</span>\n                  </label>\n                  <label class="flex-1 cursor-pointer">\n                    <input type="radio" name="codeStyle" value="builder" class="radio radio-primary radio-sm" ${"builder"===this.state.codeStyle?"checked":""}>\n                    <span class="label-text ml-2">GridView.builder</span>\n                  </label>\n                </div>\n                <div class="text-xs opacity-60 mt-1">\n                  ${"count"===this.state.codeStyle?"Best for static layouts":"Best for dynamic data lists"}\n                </div>\n              </div>\n              <div class="divider my-1"></div>\n              ${this.renderSlider("columns","Cross Axis Count",2,6,1,"primary","Number of columns in the grid")}\n              ${this.renderSlider("mainSpacing","Main Axis Spacing",0,40,1,"secondary","Vertical spacing between items")}\n              ${this.renderSlider("crossSpacing","Cross Axis Spacing",0,40,1,"secondary","Horizontal spacing between items")}\n              ${this.renderSlider("aspectRatio","Child Aspect Ratio",.5,2,.1,"accent","Width to height ratio of each cell")}\n              ${this.renderSlider("padding","Padding",0,40,1,"info","Padding around the entire grid")}\n              ${this.renderSlider("itemCount","Item Count",4,24,1,"","Number of items to display")}\n            </div>\n          </div>\n          <button class="btn btn-primary btn-block copy-code-btn">ðŸ“‹ Copy Flutter Code</button>\n        </div>\n      `}renderSlider(t,e,n,s,i,a,o){const r=a?`range-${a}`:"";return`\n        <div>\n          <label class="label">\n            <span class="label-text font-semibold">${e}</span>\n            <span class="label-text-alt badge ${a?`badge-${a}`:""}" data-value="${t}">${this.state[t]}</span>\n          </label>\n          <input type="range" min="${n}" max="${s}" step="${i}" value="${this.state[t]}"\n                 class="range ${r} range-sm" data-slider="${t}">\n          <div class="text-xs opacity-60 mt-1">${o}</div>\n        </div>\n      `}renderPreview(){return`\n        <div class="card bg-base-200 shadow-sm" style="flex: 2;">\n          <div class="card-body p-4 flex flex-col" style="height: 100%;">\n            <h4 class="font-bold text-lg mb-2">Live Preview</h4>\n            <div class="grid-preview bg-base-100 rounded-lg overflow-auto flex-1" style="padding: ${this.state.padding}px;">\n              <div class="grid-container"></div>\n            </div>\n          </div>\n        </div>\n      `}renderCodeOutput(){return'\n        <div class="card bg-base-200 shadow-sm" style="flex: 1;">\n          <div class="card-body p-4 flex flex-col" style="height: 100%;">\n            <h4 class="font-bold text-lg mb-2">Generated Flutter Code</h4>\n            <pre class="code-output bg-base-300 p-4 rounded-lg text-sm overflow-x-auto flex-1"><code></code></pre>\n          </div>\n        </div>\n      '}attachEventListeners(){this.container.querySelectorAll("[data-slider]").forEach(t=>{t.addEventListener("input",t=>{const e=t.target.dataset.slider,n=parseFloat(t.target.value);this.updateState(e,n)})});this.container.querySelectorAll('input[name="codeStyle"]').forEach(t=>{t.addEventListener("change",t=>{this.updateState("codeStyle",t.target.value);const e=t.target.closest(".card-body").querySelector(".text-xs.opacity-60");e&&(e.textContent="count"===t.target.value?"Best for static layouts":"Best for dynamic data lists")})});const t=this.container.querySelector(".copy-code-btn");t&&t.addEventListener("click",()=>this.copyCode())}updateState(t,e){this.state[t]=e;const n=this.container.querySelector(`[data-value="${t}"]`);n&&(n.textContent=e),this.updateGrid(),this.updateCode()}updateGrid(){const t=this.container.querySelector(".grid-container");if(!t)return;const e=["bg-primary text-primary-content","bg-secondary text-secondary-content","bg-accent text-accent-content"];let n=`<div style="display: grid; grid-template-columns: repeat(${this.state.columns}, 1fr); gap: ${this.state.mainSpacing}px;">`;for(let t=1;t<=this.state.itemCount;t++){n+=`<div class="${e[(t-1)%3]} rounded-lg flex items-center justify-center font-bold" style="aspect-ratio: ${this.state.aspectRatio};">${t}</div>`}n+="</div>",t.innerHTML=n;const s=this.container.querySelector(".grid-preview");s&&(s.style.padding=`${this.state.padding}px`)}updateCode(){const t=this.generateFlutterCode(),e=this.container.querySelector(".code-output code");e&&(e.textContent=t),this.options.onCodeGenerated&&this.options.onCodeGenerated(t)}generateCountCode(){return`GridView.count(\n  crossAxisCount: ${this.state.columns},\n  mainAxisSpacing: ${this.state.mainSpacing},\n  crossAxisSpacing: ${this.state.crossSpacing},\n  childAspectRatio: ${this.state.aspectRatio},\n  padding: EdgeInsets.all(${this.state.padding}),\n  children: List.generate(${this.state.itemCount}, (index) {\n    return Container(\n      decoration: BoxDecoration(\n        color: Colors.blue,\n        borderRadius: BorderRadius.circular(8),\n      ),\n      child: Center(\n        child: Text(\n          '\${index + 1}',\n          style: TextStyle(\n            color: Colors.white,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n      ),\n    );\n  }),\n)`}generateBuilderCode(){return`GridView.builder(\n  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n    crossAxisCount: ${this.state.columns},\n    mainAxisSpacing: ${this.state.mainSpacing},\n    crossAxisSpacing: ${this.state.crossSpacing},\n    childAspectRatio: ${this.state.aspectRatio},\n  ),\n  padding: EdgeInsets.all(${this.state.padding}),\n  itemCount: ${this.state.itemCount},\n  itemBuilder: (context, index) {\n    return Container(\n      decoration: BoxDecoration(\n        color: Colors.blue,\n        borderRadius: BorderRadius.circular(8),\n      ),\n      child: Center(\n        child: Text(\n          '\${index + 1}',\n          style: TextStyle(\n            color: Colors.white,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n      ),\n    );\n  },\n)`}generateFlutterCode(){return"builder"===this.state.codeStyle?this.generateBuilderCode():this.generateCountCode()}copyCode(){const t=this.generateFlutterCode();navigator.clipboard.writeText(t).then(()=>{const t=this.container.querySelector(".copy-code-btn");if(t){const e=t.textContent;t.textContent="âœ“ Code Copied to Clipboard!",t.classList.remove("btn-primary"),t.classList.add("btn-success"),setTimeout(()=>{t.textContent=e,t.classList.remove("btn-success"),t.classList.add("btn-primary")},2e3)}})}getCode(){return this.generateFlutterCode()}getState(){return{...this.state}}setState(t){Object.assign(this.state,t),this.updateGrid(),this.updateCode(),Object.keys(t).forEach(t=>{const e=this.container.querySelector(`[data-slider="${t}"]`);e&&(e.value=this.state[t]);const n=this.container.querySelector(`[data-value="${t}"]`);n&&(n.textContent=this.state[t])})}}}();